services:
    postgres:
        container_name: db
        image: postgres
        environment:
            POSTGRES_USER: username
            POSTGRES_PASSWORD: password
            PGDATA: /var/lib/postgresql/data
            POSTGRES_DB: store
        volumes:
            - postgres:/data/postgres
        ports:
            - "5432:5432"
        restart: unless-stopped
        extends:
            file: common-config.yml
            service: microservice-base-config

    zookeeper:
        container_name: zookeeper
        image: confluentinc/cp-zookeeper:latest
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        ports:
            - "2181:2181"
        extends:
            file: common-config.yml
            service: microservice-base-config

    kafka:
        container_name: kafka
        image: confluentinc/cp-kafka:latest
        depends_on:
            - zookeeper
        ports:
            - "9092:9092"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        extends:
            file: common-config.yml
            service: microservice-base-config

    kafka-ui:
        container_name: kafka-ui
        image: provectuslabs/kafka-ui:latest
        depends_on:
            - kafka
        ports:
            - "8090:8080"
        environment:
            KAFKA_CLUSTERS_0_NAME: local
            KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
            KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
        extends:
            file: common-config.yml
            service: microservice-base-config

    keycloak:
        image: quay.io/keycloak/keycloak:26.0.5
        container_name: keycloak
        ports:
            - "8080:8080"
        environment:
            KEYCLOAK_ADMIN: admin
            KEYCLOAK_ADMIN_PASSWORD: admin
        command: "start-dev"
        extends:
            file: common-config.yml
            service: microservice-base-config

    eureka-server:
        image: "praveenukkoji/eureka-server:1.0"
        container_name: eureka-server
        ports:
            - "8761:8761"
        environment:
            SPRING_PROFILES_ACTIVE: docker
        healthcheck:
            test: "curl --fail --silent localhost:8761/actuator/health/readiness | grep UP || exit 1"
            interval: 10s
            timeout: 5s
            retries: 10
            start_period: 10s
        extends:
            file: common-config.yml
            service: microservice-base-config

    config-server:
        image: "praveenukkoji/config-server:1.0"
        container_name: config-server
        ports:
            - "8888:8888"
        healthcheck:
            test: "curl --fail --silent localhost:8888/actuator/health/readiness | grep UP || exit 1"
            interval: 10s
            timeout: 5s
            retries: 10
            start_period: 10s
        depends_on:
            eureka-server:
                condition: service_healthy
        extends:
            file: common-config.yml
            service: microservice-base-config

    notificationservice:
        image: "praveenukkoji/notificationservice:1.0"
        container_name: notificationservice
        ports:
            - "7004:7004"
        environment:
            SPRING_PROFILES_ACTIVE: docker
        healthcheck:
            test: "curl --fail --silent localhost:7004/actuator/health/readiness | grep UP || exit 1"
            interval: 10s
            timeout: 5s
            retries: 10
            start_period: 10s
        depends_on:
            config-server:
                condition: service_healthy
            kafka:
                condition: service_started
        extends:
            file: common-config.yml
            service: microservice-base-config

    paymentservice:
        image: "praveenukkoji/paymentservice:1.0"
        container_name: paymentservice
        ports:
            - "7003:7003"
        environment:
            SPRING_PROFILES_ACTIVE: docker
        healthcheck:
            test: "curl --fail --silent localhost:7003/actuator/health/readiness | grep UP || exit 1"
            interval: 10s
            timeout: 5s
            retries: 10
            start_period: 10s
        depends_on:
            orderservice:
                condition: service_healthy
            kafka:
                condition: service_started
            config-server:
                condition: service_healthy
            postgres:
                condition: service_started
        extends:
            file: common-config.yml
            service: microservice-base-config

    orderservice:
        image: "praveenukkoji/orderservice:1.0"
        container_name: orderservice
        ports:
            - "7002:7002"
        environment:
            SPRING_PROFILES_ACTIVE: docker
        healthcheck:
            test: "curl --fail --silent localhost:7002/actuator/health/readiness | grep UP || exit 1"
            interval: 10s
            timeout: 5s
            retries: 10
            start_period: 10s
        depends_on:
            productservice:
                condition: service_healthy
            kafka:
                condition: service_started
            config-server:
                condition: service_healthy
            postgres:
                condition: service_started
        extends:
            file: common-config.yml
            service: microservice-base-config

    productservice:
        image: "praveenukkoji/productservice:1.0"
        container_name: productservice
        ports:
            - "7001:7001"
        environment:
            SPRING_PROFILES_ACTIVE: docker
        healthcheck:
            test: "curl --fail --silent localhost:7001/actuator/health/readiness | grep UP || exit 1"
            interval: 10s
            timeout: 5s
            retries: 10
            start_period: 10s
        depends_on:
            config-server:
                condition: service_healthy
            postgres:
                condition: service_started
        extends:
            file: common-config.yml
            service: microservice-base-config

    userservice:
        image: "praveenukkoji/userservice:1.0"
        container_name: userservice
        ports:
            - "7010:7010"
        environment:
            SPRING_PROFILES_ACTIVE: docker
        healthcheck:
            test: "curl --fail --silent localhost:7010/actuator/health/readiness | grep UP || exit 1"
            interval: 10s
            timeout: 5s
            retries: 10
            start_period: 10s
        depends_on:
            config-server:
                condition: service_healthy
            postgres:
                condition: service_started
        extends:
            file: common-config.yml
            service: microservice-base-config

    api-gateway:
        image: "praveenukkoji/api-gateway:1.0"
        container_name: api-gateway
        ports:
            - "8222:8222"
        environment:
            SPRING_PROFILES_ACTIVE: docker
        healthcheck:
            test: "curl --fail --silent localhost:8222/actuator/health/readiness | grep UP || exit 1"
            interval: 10s
            timeout: 5s
            retries: 10
            start_period: 10s
        depends_on:
            keycloak:
                condition: service_started
            config-server:
                condition: service_healthy
            notificationservice:
                condition: service_healthy
            paymentservice:
                condition: service_healthy
            orderservice:
                condition: service_healthy
            productservice:
                condition: service_healthy
            userservice:
                condition: service_healthy
        extends:
            file: common-config.yml
            service: microservice-base-config

networks:
    store-backend:
        name: docker-local-store-backend
        driver: bridge

volumes:
    postgres:
        name: docker-local-postgres-data
        driver: local
